import re
import asyncio
from datetime import date, time as dtime
from aiogram.exceptions import TelegramBadRequest
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, MessageEntity
from aiogram.enums import ChatAction, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.filters.command import CommandObject
from aiogram.utils.formatting import CustomEmoji
import json, logging, os

from states import Flow
from keyboards import start_kb, gender_kb, system_kb, time_known_kb, back_kb, main_menu_kb
from services import db as dbsvc
from services import geocode as geosvc
from services import astro as astrosvc
from services import llm as llmsvc
from services.db import _require_pool
from scenarios import SCN  # ‚Üê –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç


router = Router()

SCN_PREFIX = "scn:"  # –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤


# helpers

YEAR_ONLY_RE = re.compile(r"^\s*(?:19|20)\d{2}\s*$")

def _needs_year_regen(text: str | None) -> bool:
    """–ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≥–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç: –ø—É—Å—Ç–æ / —Ç–æ–ª—å–∫–æ –≥–æ–¥ / —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ."""
    if text is None:
        return True
    s = text.strip()
    if not s:
        return True
    if YEAR_ONLY_RE.fullmatch(s):
        return True
    if len(s) < 40:  # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç—á—ë—Ç–∞
        return True
    return False


async def _get_admin_value(key: str):
    try:
        return await dbsvc.get_admin_value(key)
    except Exception as e:
        logging.warning("get_admin_value(%s) failed: %s", key, e)
        return None


async def _scenarios_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ admin_scenarios."""
    items = await dbsvc.list_enabled_scenarios()  # [{scenario,title}]
    kb = InlineKeyboardBuilder()
    for s in items:
        kb.button(text=s["title"], callback_data=f"{SCN_PREFIX}{s['scenario']}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    kb.adjust(2, 2, 1)
    return kb.as_markup()

def _parse_ref_code(s: str | None) -> int | None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–∏–ø–ª–∏–Ω–∫–∞ (?start=...), –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      - 'ref<tg_id>' (–Ω–∞—à —Ñ–æ—Ä–º–∞—Ç –∏–∑ –º–µ–Ω—é)
      - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ '<tg_id>'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tg_id –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –∏–ª–∏ None.
    """
    if not s:
        return None
    s = s.strip()
    if s.startswith("ref"):
        s = s[3:]
    s = s.strip()
    if s.isdigit():
        try:
            val = int(s)
            return val if val > 0 else None
        except Exception:
            return None
    return None

def _as_bool(v) -> bool:
    if isinstance(v, bool):
        return v
    if isinstance(v, str):
        return v.strip().lower() in ("1", "true", "t", "yes", "on")
    return False

def _as_json_obj(v) -> dict:
    if isinstance(v, dict):
        return v
    if isinstance(v, str):
        try:
            return json.loads(v)
        except Exception:
            return {}
    return {}


async def _locks_for_menu_from_message(m: Message) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–æ—á–∫–∏, –∏–º–µ—è —Ç–æ–ª—å–∫–æ Message (–ø–æ—Å–ª–µ —Å–ø–∏–Ω–Ω–µ—Ä–∞)."""
    class _Dummy:
        def __init__(self, bot, uid):
            self.bot = bot
            self.from_user = type("U", (), {"id": uid})()
    dummy = _Dummy(m.bot, m.from_user.id)
    return await _locks_for_menu(dummy)

def _fmt_bullets(items: list[str]) -> str:
    return "\n".join(f"‚Ä¢ {str(x)}" for x in items[:10])

# ===== Helpers –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ =====

async def _first_breakdown_text(session_id: int) -> str | None:
    """–¢–µ–∫—Å—Ç ¬´10 —Å–∏–ª—å–Ω—ã—Ö / 10 —Å–ª–∞–±—ã—Ö¬ª –∏–∑ –ë–î, –µ—Å–ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."""
    facts = await dbsvc.get_session_facts(session_id) or {}
    s_items = (facts.get("strengths") or {}).get("items") or []
    w_items = (facts.get("weaknesses") or {}).get("items") or []
    if not s_items and not w_items:
        return None

    lines = ["üîÆ –¢–≤–æ—è –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞. –í–æ—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑–±–æ—Ä:", ""]
    if s_items:
        lines.append("10 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω")
        lines += [f"‚Ä¢ {x}" for x in s_items[:10]]
        lines.append("")
    if w_items:
        lines.append("10 —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω")
        lines += [f"‚Ä¢ {x}" for x in w_items[:10]]
    return "\n".join(lines)


async def _session_id_from_state_or_db(cb: CallbackQuery, state: FSMContext) -> int | None:
    """–ë–µ—Ä—ë–º session_id –∏–∑ FSM, –∏–Ω–∞—á–µ ‚Äî –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î –ø–æ tg_id."""
    data = await state.get_data()
    sid = data.get("session_id")
    if sid:
        return sid
    user_id = await dbsvc.get_user_id_by_tg(cb.from_user.id)
    if not user_id:
        return None
    return await dbsvc.get_active_session_id(user_id)


async def _render_main(cb: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω: –µ—Å–ª–∏ –µ—Å—Ç—å 10/10 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:¬ª."""
    sid = await _session_id_from_state_or_db(cb, state)
    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)

    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    if sid:
        first = await _first_breakdown_text(sid)
        if first:
            text = first

    await safe_edit(cb, text, reply_markup=markup)



async def _spinner(bot, chat_id: int, stop: asyncio.Event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –∫–∞–∂–¥—ã–µ ~4 —Å–µ–∫, –ø–æ–∫–∞ stop –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω."""
    while not stop.is_set():
        try:
            await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception:
            pass
        await asyncio.sleep(4)

def _gate_keyboard(scenario: str, link: str | None):
    kb = InlineKeyboardBuilder()
    if link:
        kb.button(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=link)
    kb.button(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"gate:recheck:{scenario}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    kb.adjust(1, 1, 1)
    return kb.as_markup()

async def _gate_check_and_prompt(cb: CallbackQuery, scenario: str) -> bool:
    need, link = await _need_channel_gate(cb, scenario)
    if not need:
        return False
    txt = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª."
    if link:
        txt += f"\n–ü–µ—Ä–µ–π–¥–∏: {link}\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª."
    else:
        txt += "\n–ü–æ–¥–ø–∏—à–∏—Å—å, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª."
    await safe_edit(cb, txt, reply_markup=_gate_keyboard(scenario, link))
    return True

from typing import Any, Optional


async def _user_is_channel_member(cb: CallbackQuery, channel_id: str) -> bool:
    try:
        mem = await cb.bot.get_chat_member(chat_id=channel_id, user_id=cb.from_user.id)
        return mem.status in ("member", "administrator", "creator")
    except Exception:
        return False


async def _need_channel_gate(cb: CallbackQuery, scenario: str) -> tuple[bool, str | None]:
    """
    True/—Å—Å—ã–ª–∫–∞ –µ—Å–ª–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –µ—ë –Ω–µ—Ç.
    –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥ –∑–∞–º–∫–æ–º, –µ—Å–ª–∏ bonus_sections[scenario] == 'channel'
    –∏ –≤–∫–ª—é—á—ë–Ω enable_channel_gate.
    """
    enable_gate_raw = await dbsvc.get_admin_value("enable_channel_gate")
    enable_gate = _as_bool(enable_gate_raw)
    if not enable_gate:
        return (False, None)

    bonus_raw = await dbsvc.get_admin_value("bonus_sections")
    bonus = _as_json_obj(bonus_raw)
    if bonus.get(scenario) != "channel":
        return (False, None)

    # —á–∏—Ç–∞–µ–º id/handle –∏ —è–≤–Ω—ã–π URL –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    channel_id = await dbsvc.get_admin_value("telegram_channel_id") or ""
    url_override = await dbsvc.get_admin_value("telegram_channel_url") or ""

    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ + —Ç—Ä–∏–º –ø—Ä–æ–±–µ–ª–æ–≤/–∫–∞–≤—ã—á–µ–∫, –Ω–∞ –≤—Å—è–∫–∏–π
    if not isinstance(channel_id, str):
        channel_id = str(channel_id)
    if not isinstance(url_override, str):
        url_override = str(url_override)
    channel_id = channel_id.strip().strip('"').strip("'")
    url_override = url_override.strip().strip('"').strip("'")

    # —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω?
    if channel_id and await _user_is_channel_member(cb, channel_id):
        return (False, None)

    # —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É
    link = None
    if url_override:
        link = url_override
    elif channel_id.startswith("@"):
        link = f"https://t.me/{channel_id.lstrip('@')}"
    # –¥–ª—è -100... –±–µ–∑ username –ª–∏–Ω–∫ –Ω–µ —Å—Ç—Ä–æ–∏–º
    return (True, link)

# ---------- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –≥–µ–π—Ç ----------

async def _referral_count(user_id: int) -> int:
    """–°–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —Ç–∞–±–ª–∏—Ü–µ referrals)."""
    pool = _require_pool()
    row = await pool.fetchrow(
        "SELECT COUNT(*) AS c FROM referrals WHERE inviter_user_id=$1",
        user_id,
    )
    return int(row["c"] if row and row["c"] is not None else 0)

async def _need_referral_gate(cb: CallbackQuery, scenario: str) -> tuple[bool, int, int]:
    """
    True/—Ç–µ–∫—É—â–∏–π/–ø–æ—Ä–æ–≥ –µ—Å–ª–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω—É–∂–µ–Ω —Ä–µ—Ñ-–≥–µ–π—Ç –∏ –æ–Ω –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:
      - admin_settings.enable_referrals (bool)
      - admin_settings.referral_bonus_threshold (int)
      - admin_settings.bonus_sections -> {"year": "referral", ...}
    """
    enabled = _as_bool(await _get_admin_value("enable_referrals"))
    if not enabled:
        return (False, 0, 0)

    bonus = _as_json_obj(await _get_admin_value("bonus_sections"))
    if bonus.get(scenario) != "referral":
        return (False, 0, 0)

    try:
        threshold = int(await _get_admin_value("referral_bonus_threshold") or 3)
    except Exception:
        threshold = 3

    # user_id –≤ –ë–î
    pool = _require_pool()
    row = await pool.fetchrow("SELECT id FROM users WHERE tg_id=$1", cb.from_user.id)
    if not row:
        return (True, 0, threshold)

    cnt = await _referral_count(row["id"])
    return (cnt < threshold, cnt, threshold)


async def _locks_for_menu(cb: CallbackQuery) -> dict:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∑–∞–º–æ—á–∫–∏ –ø–æ bonus_sections –∏–∑ –∞–¥–º–∏–Ω–∫–∏."""
    locked = {}
    bonus = _as_json_obj(await _get_admin_value("bonus_sections")) or {}

    for scen, mode in bonus.items():
        mode = (mode or "").strip().lower()
        if mode == "channel":
            need, _ = await _need_channel_gate(cb, scen)
            if need:
                locked[f"menu:{scen}"] = True
        elif mode in {"referral", "referrals"}:
            need, _, _ = await _need_referral_gate(cb, scen)
            if need:
                locked[f"menu:{scen}"] = True

    return locked

NAME_RE = re.compile(r"^[A-Za-z√Ä-√ø\u0400-\u04FF\s.-]{1,50}$")
DATE_RE = re.compile(r"^([0-2][0-9]|3[01])\.(0[1-9]|1[0-2])\.(\d{4})$")
TIME_RE = re.compile(r"^(?:[01]?[0-9]|2[0-3]):[0-5][0-9]$")
CITY_RE = re.compile(r"^[A-Za-z√Ä-√ø\u0400-\u04FF\s.-]{2,80}$")


@router.message(CommandStart())
async def cmd_start(m: Message, command: CommandObject, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start c –¥–∏–ø-–ª–∏–Ω–∫–æ–º (?start=ref<tg_id>) –∏ –±–µ–∑ –Ω–µ–≥–æ.
    - –°–æ–∑–¥–∞—ë—Ç (–∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ—Ñ-–∫–æ–¥ –∏ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤—è–∑—å.
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å".
    """
    tg = m.from_user
    invited_user_id = await dbsvc.ensure_user(tg_id=tg.id, user_name=tg.full_name or None)

    inviter_tg_id = _parse_ref_code(command.args if command else None)
    if inviter_tg_id and inviter_tg_id != tg.id:
        inviter_user_id = await dbsvc.get_user_id_by_tg(inviter_tg_id)
        if inviter_user_id:
            try:
                await dbsvc.register_referral(inviter_user_id, invited_user_id)
                logging.info(f"Referral linked: inviter={inviter_user_id} invited={invited_user_id}")
            except Exception as e:
                logging.warning(f"register_referral failed: {e}")

    greeting = await dbsvc.get_greeting_text()
    await m.answer(greeting, reply_markup=start_kb())
    await state.clear()



@router.callback_query(F.data == "nav:begin")
async def ask_name(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.NAME)
    await safe_edit(cb,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? "
        "<i>(—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)</i>"
    )


@router.message(Flow.NAME)
async def set_name(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if not NAME_RE.match(name):
        await m.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    tg = m.from_user
    user_id = await dbsvc.ensure_user(tg_id=tg.id, user_name=tg.full_name or None)
    await dbsvc.set_user_name(user_id, name)

    await state.update_data(user_id=user_id, user_name=name)
    await state.set_state(Flow.GENDER)
    await m.answer(f"–ü—Ä–∏–Ω—è—Ç–æ, {name}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_kb())


@router.callback_query(Flow.GENDER, F.data.startswith("gender:"))
async def set_gender(cb: CallbackQuery, state: FSMContext):
    gender = cb.data.split(":", 1)[1]
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        tg = cb.from_user
        user_id = await dbsvc.ensure_user(tg_id=tg.id, user_name=tg.full_name or None)
        await state.update_data(user_id=user_id)

    await dbsvc.set_user_gender(user_id, gender)
    await state.update_data(gender=gender)
    await state.set_state(Flow.SYSTEM)
    await safe_edit(cb, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏:", reply_markup=system_kb())


@router.callback_query(Flow.GENDER, F.data == "nav:back")
async def back_to_name(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.NAME)
    await safe_edit(cb, "–û–∫–µ–π, –¥–∞–≤–∞–π –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏ –∏–º—è:")



@router.callback_query(Flow.SYSTEM, F.data.startswith("system:"))
async def set_system(cb: CallbackQuery, state: FSMContext):
    system = cb.data.split(":", 1)[1]  # western|vedic|bazi
    data = await state.get_data()
    user_id = data.get("user_id")
    name = data.get("user_name", "–¥—Ä—É–≥")

    await dbsvc.deactivate_sessions(user_id)
    session_id = await dbsvc.create_session(user_id, system)
    await state.update_data(system=system, session_id=session_id)

    await state.set_state(Flow.BIRTH_DATE)
    title = {"western": "–ó–∞–ø–∞–¥–Ω–∞—è", "vedic": "–í–µ–¥–∏—á–µ—Å–∫–∞—è", "bazi": "–ë–∞–¶–∑—ã"}[system]
    await safe_edit(cb,
                    f"–û—Ç–ª–∏—á–Ω–æ, {name}! –í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: <b>{title}</b>.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.1990</code>).",
                    reply_markup=back_kb()
                    )


@router.callback_query(Flow.SYSTEM, F.data == "nav:back")
async def back_to_gender(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.GENDER)
    await safe_edit(cb, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞:", reply_markup=gender_kb())


@router.message(Flow.BIRTH_DATE)
async def set_birth_date(m: Message, state: FSMContext):
    text = (m.text or "").strip()
    mm = DATE_RE.match(text)
    if not mm:
        await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990")
        return
    dd, mm_, yyyy = int(mm.group(1)), int(mm.group(2)), int(mm.group(3))
    try:
        d = date(yyyy, mm_, dd)
    except ValueError:
        await m.reply("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    data = await state.get_data()
    session_id = data["session_id"]
    await dbsvc.set_birth_date(session_id, d)
    await state.update_data(birth_date=d)

    await state.set_state(Flow.TIME_KNOWN)
    await m.answer("–í—ã –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=time_known_kb())


@router.callback_query(Flow.BIRTH_DATE, F.data == "nav:back")
async def back_to_system(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.SYSTEM)
    await safe_edit(cb, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏:", reply_markup=system_kb())


@router.callback_query(Flow.TIME_KNOWN, F.data == "time:known")
async def time_known_yes(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.BIRTH_TIME)
    await safe_edit(cb,
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>09:15</code>).",
        reply_markup=back_kb()
    )


@router.callback_query(Flow.TIME_KNOWN, F.data == "time:unknown")
async def time_known_no(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.CITY)
    await safe_edit(cb, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç).", reply_markup=back_kb())


@router.callback_query(Flow.TIME_KNOWN, F.data == "nav:back")
async def back_to_date(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.BIRTH_DATE)
    await safe_edit(cb,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.1990</code>).",
        reply_markup=back_kb()
    )


@router.message(Flow.BIRTH_TIME)
async def set_birth_time(m: Message, state: FSMContext):
    t = (m.text or "").strip()
    if not TIME_RE.match(t):
        await m.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:15")
        return
    hh, mn = map(int, t.split(":"))
    t_obj = dtime(hour=hh, minute=mn)

    data = await state.get_data()
    await dbsvc.set_birth_time(data["session_id"], t_obj)
    await state.update_data(birth_time=t_obj)

    await state.set_state(Flow.CITY)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç).", reply_markup=back_kb())


@router.callback_query(Flow.BIRTH_TIME, F.data == "nav:back")
async def back_to_time_known(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Flow.TIME_KNOWN)
    await safe_edit(cb, "–í—ã –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=time_known_kb())


@router.message(Flow.CITY)
async def set_city(m: Message, state: FSMContext):
    city = (m.text or "").strip()
    if not CITY_RE.match(city):
        await m.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ (2‚Äì80 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã/–ø—Ä–æ–±–µ–ª/—Ç–æ—á–∫–∞/–¥–µ—Ñ–∏—Å).")
        return

    try:
        lat, lon, tz = await geosvc.geocode_city(city)
    except Exception:
        await m.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥.")
        return


    data = await state.get_data()
    await dbsvc.set_location(data["session_id"], lat, lon, tz)
    await state.update_data(lat=lat, lon=lon, tz=tz)

    # –°–ø–∏–Ω–Ω–µ—Ä + —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞
    await state.set_state(Flow.CALC_SPINNER)
    msg = await m.answer("‚ö°Ô∏è –°—Ç—Ä–æ—é —Ç–≤–æ—é –∫–∞—Ä—Ç—É‚Ä¶ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ")
    spinner_msg = None
    stop = asyncio.Event()
    typing_task = asyncio.create_task(_spinner(m.bot, m.chat.id, stop))  # "–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶"
    spinner_msg = await _send_spinner(m)  # –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π —à–∞—Ä (<tg-emoji> –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UTC –∏ —Ä–∞—Å—á—ë—Ç –∫–∞—Ä—Ç—ã
        bd = data["birth_date"]
        bt = data.get("birth_time")
        b = astrosvc.BirthInput(
            system=data["system"], birth_date=bd, birth_time=bt, lat=lat, lon=lon, tz=tz
        )
        dt_utc = astrosvc.to_utc_datetime(b)  # —É—á–∏—Ç—ã–≤–∞–µ—Ç TZ –∏ DST
        astro_json = astrosvc.compute_all(b, dt_utc)

        await dbsvc.save_raw_calc(data["session_id"], astro_json)
        await dbsvc.set_unknown_time(data["session_id"], bt is None)

        # –ü–µ—Ä–≤–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: 10 —Å–∏–ª—å–Ω—ã—Ö / 10 —Å–ª–∞–±—ã—Ö
        session_id = data["session_id"]
        strengths = await llmsvc.generate_list_or_mock(
            scenario="strengths", n=10, astro_json=astro_json, session_summary=None, session_id=session_id
        )
        weaknesses = await llmsvc.generate_list_or_mock(
            scenario="weaknesses", n=10, astro_json=astro_json, session_summary=None, session_id=session_id
        )
        await dbsvc.upsert_session_facts(session_id, strengths=strengths, weaknesses=weaknesses)

        # –í–µ—Ä—Å–∏–∏ —Ñ–∞–∫—Ç–æ–≤ ‚Äî –¥–µ–ª–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        await dbsvc.add_fact_version(session_id, "strengths", strengths, make_active=True)
        await dbsvc.add_fact_version(session_id, "weaknesses", weaknesses, make_active=True)

        # –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏ (–¥–ª—è LLM-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        name = data.get("user_name") or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        gender = data.get("gender") or "-"
        sys_title = {"western": "–ó–∞–ø–∞–¥–Ω–∞—è", "vedic": "–í–µ–¥–∏—á–µ—Å–∫–∞—è", "bazi": "–ë–∞–¶–∑—ã"}.get(data["system"], data["system"])
        city_str = f"lat={lat}, lon={lon}, tz={tz}"
        summary = (
                f"–ò–º—è: {name}; –ø–æ–ª: {gender}; —Å–∏—Å—Ç–µ–º–∞: {sys_title}; –¥–∞—Ç–∞: {bd}"
                + (f", –≤—Ä–µ–º—è: {bt}" if bt else ", –≤—Ä–µ–º—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                + f"; –º–µ—Å—Ç–æ: {city_str}. "
                  f"–°–∏–ª—å–Ω—ã–µ: {', '.join(strengths.get('items', [])[:3])}. "
                  f"–°–ª–∞–±—ã–µ: {', '.join(weaknesses.get('items', [])[:3])}."
        )
        await dbsvc.upsert_session_summary(session_id, summary)

        # –¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞: 10/10 + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        s_items = strengths.get("items", [])
        w_items = weaknesses.get("items", [])
        first_text = (
            "üîÆ <b>–¢–≤–æ—è –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞. –í–æ—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑–±–æ—Ä:</b>\n\n"
            "<b>10 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω</b>\n"
            f"{_fmt_bullets(s_items) if s_items else '‚Äî'}\n\n"
            "<b>10 —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω</b>\n"
            f"{_fmt_bullets(w_items) if w_items else '‚Äî'}"
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –∏ —Ä–∏—Å—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.set_state(Flow.MENU)
        locks = await _locks_for_menu_from_message(m)
        markup = await _main_menu_markup_for_user(m.from_user.id, locks)
        try:
            if spinner_msg:
                await _safe_delete_message(m.bot, m.chat.id, spinner_msg.message_id)
                spinner_msg = None
        except Exception:
            pass

        await msg.edit_text(first_text, reply_markup=markup)

    except Exception as e:
        logging.exception("calc/generate failed: %s", e)
        await msg.edit_text("üòï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        await state.set_state(Flow.CITY)
    finally:
        stop.set()
        try:
            typing_task.cancel()
        except Exception:
            pass
        # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª–∏ –≤—ã—à–µ
        try:
            if spinner_msg:
                await _safe_delete_message(m.bot, m.chat.id, spinner_msg.message_id)
        except Exception:
            pass
        try:
            if spinner_msg:
                await _safe_delete_message(m.bot, m.chat.id, spinner_msg.message_id)
                spinner_msg = None
        except Exception:
            pass


@router.callback_query(Flow.CITY, F.data == "nav:back")
async def back_from_city(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–≤–æ–¥–∏–ª —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–µ–º—É,
    # –∏–Ω–∞—á–µ ‚Äî –∫ –≤–æ–ø—Ä–æ—Å—É "–∑–Ω–∞–µ—Ç–µ –ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è?"
    if data.get("birth_time"):
        await state.set_state(Flow.BIRTH_TIME)
        await safe_edit(
            cb,
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>09:15</code>).",
            reply_markup=back_kb(),
        )
    else:
        await state.set_state(Flow.TIME_KNOWN)
        await safe_edit(cb, "–í—ã –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=time_known_kb())

# ---------- Helpers ----------

def _fmt_list(items: list[str]) -> str:
    lines = [f"{i+1}. {str(x)}" for i, x in enumerate(items)]
    return "\n".join(lines)

async def safe_edit(cb: CallbackQuery, text: str, reply_markup=None):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç/markup –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî
    –º—è–≥–∫–æ –≥–∞—Å–∏–º –∫—Ä—É—Ç–∏–ª–∫—É, –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    """
    try:
        await cb.message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å—ë-—Ç–∞–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É (–≤–¥—Ä—É–≥ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
            try:
                await cb.message.edit_reply_markup(reply_markup=reply_markup)
            except TelegramBadRequest:
                pass
            await cb.answer("–£–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ üôÇ", show_alert=False)
            return
        raise
    else:
        await cb.answer()

async def _safe_delete_message(bot, chat_id: int, message_id: int | None):
    if not message_id:
        return
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass


async def _show_year(tg_id: int) -> bool:
    """–ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç –æ—Ç–∫—Ä—ã—Ç? –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–¥–º–∏–Ω–∫–∏ –∏ —á–∏—Å–ª–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö."""
    enabled = _as_bool(await _get_admin_value("enable_referrals"))
    if not enabled:
        return False

    bonus = _as_json_obj(await _get_admin_value("bonus_sections"))
    mode = (bonus.get("year") or "referral").strip().lower()
    if mode not in {"referral", "referrals"}:
        return False

    try:
        thr = int(await _get_admin_value("referral_bonus_threshold") or 0)
    except Exception:
        thr = 0
    if thr <= 0:
        return False

    pool = _require_pool()
    # –ø–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id –ø–æ tg_id
    row = await pool.fetchrow("SELECT id FROM users WHERE tg_id=$1", tg_id)
    if not row:
        return False

    have = await _referral_count(row["id"])   # —Å—á–∏—Ç–∞–µ–º –ø–æ inviter_user_id
    return have >= thr


async def _main_menu_markup_for_user(tg_id: int, locks: dict):
    # "–ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç" —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤ –º–µ–Ω—é; –∑–∞–º–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è locks["menu:year"]
    return main_menu_kb(locks)


async def _send_spinner(m: Message):
    """
    –ï—Å–ª–∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π @username (Fragment/TON), –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ <tg-emoji>.
    –ò–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –æ–±—ã—á–Ω—ã–π üîÆ.
    """
    st_id = (os.getenv("SPINNER_STICKER_ID") or "5361837567463399422").strip().strip('"').strip("'")
    html = f"<tg-emoji emoji-id='{st_id}'>üîÆ</tg-emoji>"
    try:
        return await m.answer(html, parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —è–≤–Ω—ã–π —Ñ–æ–ª–±—ç–∫
        return await m.answer("üîÆ")


async def _spinner_anim_loop(bot, chat_id: int, stop: asyncio.Event):
    """
    –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ¬´—Å–ø–∏–Ω–Ω–µ—Ä¬ª –∫–∞–∂–¥—ã–µ REFRESH —Å–µ–∫, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å –∑–∞–Ω–æ–≤–æ.
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω SPINNER_STICKER_ID ‚Äî —à–ª—ë—Ç –µ–≥–æ; –∏–Ω–∞—á–µ —à–ª—ë—Ç 'üîÆ'.
    –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ø–∏–Ω–Ω–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –º—É—Å–æ—Ä–∏—Ç—å —á–∞—Ç.
    """
    refresh = float(os.getenv("SPINNER_REFRESH_SEC", "4.0"))
    sticker_id = os.getenv("SPINNER_STICKER_ID", "").strip() or None

    last_msg_id = None
    try:
        while not stop.is_set():
            # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏–Ω–Ω–µ—Ä
            if last_msg_id:
                try:
                    await bot.delete_message(chat_id=chat_id, message_id=last_msg_id)
                except Exception:
                    pass
                last_msg_id = None

            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
            try:
                if sticker_id:
                    msg = await bot.send_message(
                        chat_id=chat_id,
                        **CustomEmoji("üîÆ", custom_emoji_id=sticker_id).as_kwargs()
                    )
                else:
                    msg = await bot.send_message(chat_id=chat_id, text="üîÆ")
                last_msg_id = msg.message_id
            except Exception as e:
                logging.warning(f"spinner loop send failed: {e}")
                last_msg_id = None

            # –∂–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–∞
            try:
                await asyncio.wait_for(stop.wait(), timeout=refresh)
            except asyncio.TimeoutError:
                continue
    finally:
        # –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –≤ –∫–æ–Ω—Ü–µ
        if last_msg_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=last_msg_id)
            except Exception:
                pass


async def _gen_and_store(session_id: int, code: str) -> tuple[dict, str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–µ—Ä–≥–∞–µ–º LLM-—Å—Ü–µ–Ω–∞—Ä–∏–π (—á–µ—Ä–µ–∑ admin_scenarios), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏
    –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (–∏—Å—Ö–æ–¥–Ω—ã–π_json, –ø—Ä–µ–≤—å—é_–¥–ª—è_—ç–∫—Ä–∞–Ω–∞).
    –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
      - mission / love -> –≤ –∫–æ–ª–æ–Ω–∫–∏ mission/love (—Ç–µ–∫—Å—Ç)
      - finance / karma / year -> –≤ session_facts.extra[code] (—Ç–µ–∫—Å—Ç)
      - strengths / weaknesses / business / countries -> —Å–ø–∏—Å–∫–∏ ("items")
      - –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ -> session_facts.extra[code] = –∫–∞–∫ –µ—Å—Ç—å (dict)
    """
    from services import llm as llmsvc

    pool = _require_pool()
    # –¥–µ—Ä–≥–∞–µ–º LLM –∏ –ø–æ–ª—É—á–∞–µ–º dict
    data = await llmsvc.run_scenario(session_id, code) or {}

    # –≤—ã—Ç–∞—â–∏–º –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–≤—å—é: –ª–∏–±–æ –ø–µ—Ä–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –ª–∏–±–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç/—Å—ã—Ä–æ–π json
    def _preview_from_data(d: dict) -> str:
        if isinstance(d, dict):
            if isinstance(d.get("items"), list):
                return "\n".join(f"‚Ä¢ {str(x)}" for x in d["items"][:10]) or "‚Äî"
            # —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è-—Ç–µ–∫—Å—Ç—ã
            for k in (code, "text", "mission", "love", "finance", "karma", "year"):
                if isinstance(d.get(k), str) and d[k].strip():
                    return d[k]
        # fallback ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π json
        try:
            return json.dumps(d, ensure_ascii=False)[:1000]
        except Exception:
            return str(d)[:1000]

    # —Ç–µ–∫—É—â–∏–µ —Ñ–∞–∫—Ç—ã
    facts = await dbsvc.get_session_facts(session_id) or {}
    extra_raw = facts.get("extra")
    extra = extra_raw.copy() if isinstance(extra_raw, dict) else {}

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
    if code in {"mission", "love"}:
        text = data.get("text") or data.get(code) or ""
        await dbsvc.add_fact_version(session_id, code, {"text": text}, make_active=True)
        await dbsvc.upsert_session_facts(session_id, **{code: text})

    elif code in {"finance", "karma", "year"}:
        text = data.get("text") or data.get(code) or ""
        await dbsvc.add_fact_version(session_id, code, {"text": text}, make_active=True)
        extra[code] = text
        await dbsvc.upsert_session_facts(session_id, extra=extra)

    elif code in {"strengths", "weaknesses", "business", "countries"}:
        # –æ–∂–∏–¥–∞–µ–º {"items":[...]}
        items = data.get("items")
        payload = {"items": items if isinstance(items, list) else []}
        await dbsvc.add_fact_version(session_id, code, payload, make_active=True)
        await dbsvc.upsert_session_facts(session_id, **{code: payload})

    else:
        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π/–∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª –≤ extra
        extra[code] = data
        await dbsvc.upsert_session_facts(session_id, extra=extra)

    # –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º summary
    await dbsvc.rebuild_session_summary(session_id)

    return data, _preview_from_data(data)




# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: —Å—Ü–µ–Ω–∞—Ä–∏–∏ ----------

@router.callback_query(Flow.MENU, F.data == "menu:mission")
async def menu_mission(cb: CallbackQuery, state: FSMContext):
    # –ö–∞–Ω–∞–ª—å–Ω—ã–π –≥–µ–π—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è)
    if await _gate_check_and_prompt(cb, "mission"):
        return
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –≥–µ–π—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è)
    need_ref, _, _ = await _need_referral_gate(cb, "mission")
    if need_ref:
        return await menu_invite(cb, state)
    data = await state.get_data()
    session_id = data["session_id"]

    facts = await dbsvc.get_session_facts(session_id)
    mission = (facts or {}).get("mission")
    if not mission:
        from services.db import _require_pool
        pool = _require_pool()
        row = await pool.fetchrow("SELECT raw_calc_json FROM sessions WHERE id=$1", session_id)
        astro_json = row["raw_calc_json"] if row else None

        summary = await dbsvc.get_session_summary_text(session_id)
        mission = await llmsvc.generate_text_or_mock(
            scenario="mission",
            astro_json=astro_json,
            session_summary=summary,
            session_id=session_id,
        )

        # –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—Å—Ç –≤ jsonb –∫–∞–∫ {"text": "..."}), + –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å
        await dbsvc.add_fact_version(session_id, "mission", {"text": mission}, make_active=True)
        await dbsvc.upsert_session_facts(session_id, mission=mission)
        await dbsvc.rebuild_session_summary(session_id)

    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)
    await safe_edit(cb, f"üåü <b>–¢–≤–æ—è –º–∏—Å—Å–∏—è</b>\n\n{mission}", reply_markup=markup)


@router.callback_query(Flow.MENU, F.data == "menu:countries")
async def menu_countries(cb: CallbackQuery, state: FSMContext):
    # –ì–ï–ô–¢
    if await _gate_check_and_prompt(cb, "countries"):
        return

    data = await state.get_data()
    session_id = data["session_id"]

    facts = await dbsvc.get_session_facts(session_id)
    countries = (facts or {}).get("countries")
    if not countries or "items" not in countries:
        from services.db import _require_pool
        pool = _require_pool()
        row = await pool.fetchrow("SELECT raw_calc_json FROM sessions WHERE id=$1", session_id)
        astro_json = row["raw_calc_json"] if row else None

        summary = await dbsvc.get_session_summary_text(session_id)
        countries = await llmsvc.generate_list_or_mock(
            scenario="countries",
            n=5,
            astro_json=astro_json,
            session_summary=summary,
            session_id=session_id,
        )
        await dbsvc.add_fact_version(session_id, "countries", countries, make_active=True)
        await dbsvc.upsert_session_facts(session_id, countries=countries)
        await dbsvc.rebuild_session_summary(session_id)

    text = "üó∫Ô∏è <b>–¢–æ–ø-5 —Å—Ç—Ä–∞–Ω –¥–ª—è –∂–∏–∑–Ω–∏</b>\n\n" + _fmt_list(countries.get("items", []))
    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)
    await safe_edit(cb, text, reply_markup=markup)


@router.callback_query(Flow.MENU, F.data == "menu:business")
async def menu_business(cb: CallbackQuery, state: FSMContext):
    if await _gate_check_and_prompt(cb, "business"):
        return
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –≥–µ–π—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è)
    need_ref, _, _ = await _need_referral_gate(cb, "business")
    if need_ref:
        return await menu_invite(cb, state)
    data = await state.get_data()
    session_id = data["session_id"]

    facts = await dbsvc.get_session_facts(session_id)
    business = (facts or {}).get("business")
    if not business or "items" not in business:
        from services.db import _require_pool
        pool = _require_pool()
        row = await pool.fetchrow("SELECT raw_calc_json FROM sessions WHERE id=$1", session_id)
        astro_json = row["raw_calc_json"] if row else None

        summary = await dbsvc.get_session_summary_text(session_id)
        business = await llmsvc.generate_list_or_mock(
            scenario="business",
            n=10,
            astro_json=astro_json,
            session_summary=summary,
            session_id=session_id,
        )
        await dbsvc.add_fact_version(session_id, "business", business, make_active=True)
        await dbsvc.upsert_session_facts(session_id, business=business)
        await dbsvc.rebuild_session_summary(session_id)

    text = "üíº <b>–¢–æ–ø-10 –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π</b>\n\n" + _fmt_list(business.get("items", []))
    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)
    await safe_edit(cb, text, reply_markup=markup)


@router.callback_query(Flow.MENU, F.data == "menu:love")
async def menu_love(cb: CallbackQuery, state: FSMContext):
    if await _gate_check_and_prompt(cb, "love"):
        return
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –≥–µ–π—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è)
    need_ref, _, _ = await _need_referral_gate(cb, "love")
    if need_ref:
        return await menu_invite(cb, state)
    data = await state.get_data()
    session_id = data["session_id"]

    facts = await dbsvc.get_session_facts(session_id)
    love = (facts or {}).get("love")
    if not love:
        from services.db import _require_pool
        pool = _require_pool()
        row = await pool.fetchrow("SELECT raw_calc_json FROM sessions WHERE id=$1", session_id)
        astro_json = row["raw_calc_json"] if row else None

        summary = await dbsvc.get_session_summary_text(session_id)
        love = await llmsvc.generate_text_or_mock(
            scenario="love",
            astro_json=astro_json,
            session_summary=summary,
            session_id=session_id,
        )
        await dbsvc.add_fact_version(session_id, "love", {"text": love}, make_active=True)
        await dbsvc.upsert_session_facts(session_id, love=love)
        await dbsvc.rebuild_session_summary(session_id)

    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)
    await safe_edit(cb, f"‚ù§Ô∏è <b>–õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å</b>\n\n{love}", reply_markup=markup)

@router.callback_query(Flow.MENU, F.data == "menu:invite")
async def menu_invite(cb: CallbackQuery, state: FSMContext):
    # username –±–æ—Ç–∞ –¥–ª—è t.me/...
    me = await cb.bot.get_me()
    bot_username = me.username or "yourbot"

    # ref-–∫–æ–¥: –∫–∞–∫ –≤ deep-link –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ‚Äî –æ–±—ã—á–Ω–æ 'ref' + tg_id
    ref_code = f"ref{cb.from_user.id}"
    invite_url = f"https://t.me/{bot_username}?start={ref_code}"

    # –ø—Ä–æ–≥—Ä–µ—Å—Å
    pool = _require_pool()
    row = await pool.fetchrow("SELECT id FROM users WHERE tg_id=$1", cb.from_user.id)
    uid = row["id"] if row else None
    cnt = await _referral_count(uid) if uid else 0
    try:
        thr = int(await _get_admin_value("referral_bonus_threshold") or 3)
    except Exception:
        thr = 3

    enabled = _as_bool(await _get_admin_value("enable_referrals"))
    tail = "" if enabled else "\n\n<i>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–µ–π—á–∞—Å –≤—ã–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.</i>"

    text = (
        "üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ ‚Üí –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å</b>\n\n"
        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{invite_url}</code>\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{cnt}</b> –∏–∑ <b>{thr}</b> –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.{tail}"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    await safe_edit(cb, text, reply_markup=kb.as_markup())


@router.callback_query(Flow.MENU, F.data == "nav:back")
async def nav_back_in_menu(cb: CallbackQuery, state: FSMContext):
    await _render_main(cb, state)


@router.callback_query(Flow.MENU, F.data == "menu:finance")
async def menu_finance(cb: CallbackQuery, state: FSMContext):
    # –ì–ï–ô–¢: –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º —ç–∫—Ä–∞–Ω –∏ –≤—ã–π–¥–µ–º
    if await _gate_check_and_prompt(cb, "finance"):
        return

    data = await state.get_data()
    session_id = data["session_id"]

    # –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∫—ç—à–∞ (session_facts.extra.finance)
    facts = await dbsvc.get_session_facts(session_id)
    finance = None
    if facts:
        extra_raw = facts.get("extra")
        extra = extra_raw if isinstance(extra_raw, dict) else {}
        finance = extra.get("finance")

    if not finance:
        # –¥–æ—Å—Ç–∞—ë–º astro_json –∏ session_summary
        from services.db import _require_pool
        pool = _require_pool()
        row = await pool.fetchrow("SELECT raw_calc_json FROM sessions WHERE id=$1", session_id)
        astro_json = row["raw_calc_json"] if row else None

        summary = await dbsvc.get_session_summary_text(session_id)

        # –≥–µ–Ω–µ—Ä–∏–º —Ç–µ–∫—Å—Ç
        finance = await llmsvc.generate_text_or_mock(
            scenario="finance",
            astro_json=astro_json,
            session_summary=summary,
            session_id=session_id,
        )

        # –≤–µ—Ä—Å–∏—è (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ ¬´–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏¬ª –≤ –±—É–¥—É—â–µ–º)
        await dbsvc.add_fact_version(session_id, "finance", {"text": finance}, make_active=True)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_facts.extra -> finance (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã)
        await pool.execute(
            """
            INSERT INTO session_facts (session_id, extra)
            VALUES ($1, jsonb_build_object('finance', to_jsonb($2::text)))
            ON CONFLICT (session_id) DO UPDATE
            SET extra = coalesce(session_facts.extra, '{}'::jsonb)
                       || jsonb_build_object('finance', to_jsonb($2::text))
            """,
            session_id, finance
        )
        await dbsvc.rebuild_session_summary(session_id)

    # —Ä–∏—Å—É–µ–º –º–µ–Ω—é —Å –∑–∞–º–æ—á–∫–∞–º–∏
    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)
    await safe_edit(cb, f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª</b>\n\n{finance}", reply_markup=markup)

@router.callback_query(Flow.MENU, F.data == "menu:year")
async def menu_year(cb: CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ –±–æ–Ω—É—Å –ù–ï –æ—Ç–∫—Ä—ã—Ç ‚Äî —Å—Ä–∞–∑—É –≤–µ–¥—ë–º –Ω–∞ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ ‚Üí –±–æ–Ω—É—Å¬ª
    need_ref, _, _ = await _need_referral_gate(cb, "year")
    if need_ref:
        return await menu_invite(cb, state)

    data = await state.get_data()
    session_id = data["session_id"]
    pool = _require_pool()

    # 1) —á–∏—Ç–∞–µ–º extra
    row = await pool.fetchrow("SELECT extra FROM session_facts WHERE session_id=$1", session_id)
    raw_extra = row["extra"] if row else None

    # 2) –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Å—Ç—Ä–æ–∫–µ + –º–∏–≥—Ä–∞—Ü–∏–∏/–ø–æ—á–∏–Ω–∫–∞ ¬´–æ–±—ë—Ä—Ç–∫–∏¬ª
    year_text = None
    if isinstance(raw_extra, dict):
        year_raw = raw_extra.get("year")
    elif isinstance(raw_extra, str) and raw_extra:
        year_raw = raw_extra
        # –º–∏–≥—Ä–∞—Ü–∏—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –í–ï–°–¨ extra –±—ã–ª —Å—Ç—Ä–æ–∫–æ–π
        await pool.execute(
            "UPDATE session_facts SET extra = jsonb_build_object('year', to_jsonb($2::text)) WHERE session_id=$1",
            session_id, year_raw
        )
    else:
        year_raw = None

    # –µ—Å–ª–∏ year_raw ‚Äî —Å–ª–æ–≤–∞—Ä—å: –±–µ—Ä—ë–º .text/.year; –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
    if isinstance(year_raw, dict):
        year_text = year_raw.get("text") or year_raw.get("year") or json.dumps(year_raw, ensure_ascii=False)
        # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º extra.year –ø–ª–æ—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        await pool.execute(
            """
            UPDATE session_facts
            SET extra = COALESCE(extra,'{}'::jsonb) || jsonb_build_object('year', to_jsonb($2::text))
            WHERE session_id=$1
            """,
            session_id, year_text
        )
    elif isinstance(year_raw, str):
        unwrapped = _unwrap_json_text(year_raw)
        if unwrapped != year_raw:
            await pool.execute(
                """
                UPDATE session_facts
                SET extra = COALESCE(extra,'{}'::jsonb) || jsonb_build_object('year', to_jsonb($2::text))
                WHERE session_id=$1
                """,
                session_id, unwrapped
            )
        year_text = unwrapped
    else:
        year_text = None

    # 3) –µ—Å–ª–∏ ¬´–º—É—Å–æ—Ä¬ª (–ø—É—Å—Ç–æ/—Ç–æ–ª—å–∫–æ –≥–æ–¥/—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ) ‚Äî –°–ù–ê–ß–ê–õ–ê –æ—á–∏—â–∞–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–µ—à–∞–ª
    if _needs_year_regen(year_text):
        await pool.execute(
            "UPDATE session_facts SET extra = COALESCE(extra,'{}'::jsonb) - 'year' WHERE session_id=$1",
            session_id
        )

        # 4) –æ—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        row2 = await pool.fetchrow("SELECT raw_calc_json FROM sessions WHERE id=$1", session_id)
        astro_json = row2["raw_calc_json"] if row2 else None
        summary = await dbsvc.get_session_summary_text(session_id)

        year_text = await llmsvc.generate_text_or_mock(
            scenario="year",
            astro_json=astro_json,
            session_summary=summary,
            session_id=session_id,
        )

        # 5) —Ñ–æ–ª–±—ç–∫: –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ –º—É—Å–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ä–Ω—É–ª–æ—Å—å ¬´2024¬ª) ‚Äî –ø—Ä–æ–±—É–µ–º –∞–¥–º–∏–Ω-—Å—Ü–µ–Ω–∞—Ä–∏–π
        if _needs_year_regen(year_text):
            try:
                data_json = await llmsvc.run_scenario(session_id, "year") or {}
                year_text = (data_json.get("text") if isinstance(data_json, dict) else "") \
                            or "–ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            except Exception:
                year_text = "–ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

        if isinstance(year_text, str):
            year_text = _unwrap_json_text(year_text)

        # 6) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–µ—Ä—Å–∏–∏ –∏ –≤ extra.year
        await dbsvc.add_fact_version(session_id, "year", {"text": year_text}, make_active=True)
        await pool.execute("""
            INSERT INTO session_facts (session_id, extra)
            VALUES ($1, jsonb_build_object('year', to_jsonb($2::text)))
            ON CONFLICT (session_id) DO UPDATE
            SET extra = COALESCE(session_facts.extra, '{}'::jsonb)
                     || jsonb_build_object('year', to_jsonb($2::text))
        """, session_id, year_text)
        await dbsvc.rebuild_session_summary(session_id)

    # 7) –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç
    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)
    await safe_edit(cb, f"üìÖ <b>–ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç</b>\n\n{year_text}", reply_markup=markup)







@router.callback_query(Flow.MENU, F.data == "menu:reset")
async def menu_reset(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if user_id:
        await dbsvc.deactivate_sessions(user_id)

    await state.clear()
    await safe_edit(
        cb,"–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üëá",
        reply_markup=start_kb()
    )


@router.callback_query(Flow.MENU, F.data == "menu:back")
async def menu_back(cb: CallbackQuery, state: FSMContext):
    await _render_main(cb, state)


@router.callback_query(Flow.MENU, F.data == "menu:karma")
async def menu_karma(cb: CallbackQuery, state: FSMContext):
    # –≥–µ–π—Ç
    if await _gate_check_and_prompt(cb, "karma"):
        return

    data = await state.get_data()
    session_id = data["session_id"]

    facts = await dbsvc.get_session_facts(session_id)
    karma = None
    if facts:
        extra_raw = facts.get("extra")
        extra = extra_raw if isinstance(extra_raw, dict) else {}
        karma = extra.get("karma")

    if not karma:
        from services.db import _require_pool
        pool = _require_pool()
        row = await pool.fetchrow("SELECT raw_calc_json FROM sessions WHERE id=$1", session_id)
        astro_json = row["raw_calc_json"] if row else None
        summary = await dbsvc.get_session_summary_text(session_id)

        karma = await llmsvc.generate_text_or_mock(
            scenario="karma",
            astro_json=astro_json,
            session_summary=summary,
            session_id=session_id,
        )

        await dbsvc.add_fact_version(session_id, "karma", {"text": karma}, make_active=True)
        await pool.execute(
            """
            INSERT INTO session_facts (session_id, extra)
            VALUES ($1, jsonb_build_object('karma', to_jsonb($2::text)))
            ON CONFLICT (session_id) DO UPDATE
            SET extra = coalesce(session_facts.extra, '{}'::jsonb)
                       || jsonb_build_object('karma', to_jsonb($2::text))
            """,
            session_id, karma
        )
        await dbsvc.rebuild_session_summary(session_id)

    locks = await _locks_for_menu(cb)
    markup = await _main_menu_markup_for_user(cb.from_user.id, locks)
    await safe_edit(cb, f"üåÄ <b>–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä</b>\n\n{karma}", reply_markup=markup)

@router.message(F.text.lower().in_({"—Ä–∞—Å—á—ë—Ç—ã", "—Ä–∞—Å—á–µ—Ç—ã"}))
@router.message(F.text.startswith("/calc"))
async def open_calc_menu_msg(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Ä–∞—Å—á—ë—Ç:", reply_markup=await _scenarios_kb())

@router.callback_query(Flow.MENU, F.data == "menu:calc")
async def open_calc_menu_cb(cb: CallbackQuery, state: FSMContext):
    await safe_edit(cb, "–í—ã–±–µ—Ä–∏ —Ä–∞—Å—á—ë—Ç:", reply_markup=await _scenarios_kb())


def _scenario_view_kb(code: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ôªÔ∏è –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data=f"scnregen:{code}")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:back")
    kb.adjust(1, 1)
    return kb.as_markup()

@router.callback_query(Flow.MENU, F.data.startswith(SCN_PREFIX))
async def run_scenario(cb: CallbackQuery, state: FSMContext):
    code = cb.data[len(SCN_PREFIX):].strip().lower()

    # –≥–µ–π—Ç—ã –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    if await _gate_check_and_prompt(cb, code):
        return

    # 2) —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –≥–µ–π—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è)
    need_ref, _, _ = await _need_referral_gate(cb, code)
    if need_ref:
        await cb.answer("–ë–æ–Ω—É—Å –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –†–∞–∑–¥–µ–ª ¬´–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ ‚Üí –±–æ–Ω—É—Å¬ª.", show_alert=True)
        return await menu_invite(cb, state)

    data = await state.get_data()
    session_id = data.get("session_id")
    if not session_id:
        user_id = await dbsvc.get_user_id_by_tg(cb.from_user.id)
        session_id = await dbsvc.get_active_session_id(user_id or 0)
        if not session_id:
            await cb.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞–∂–º–∏ /start.")
            await cb.answer()
            return
        await state.update_data(session_id=session_id)

    await cb.answer()  # —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
    await cb.message.answer("–ì–æ—Ç–æ–≤–ª—é —Ä–∞–∑–¥–µ–ª‚Ä¶")

    _, preview = await _gen_and_store(session_id, code)

    head = await _scenario_title(code)
    await cb.message.answer(f"<b>{head}</b>\n\n{preview}", reply_markup=_scenario_view_kb(code))


@router.callback_query(Flow.MENU, F.data.startswith("scnregen:"))
async def scenario_regen(cb: CallbackQuery, state: FSMContext):
    code = cb.data.split(":", 1)[1]

    # —Ç–µ –∂–µ –≥–µ–π—Ç—ã
    if code in {SCN.FINANCE.value, SCN.COUNTRIES.value, SCN.KARMA.value} and await _gate_check_and_prompt(cb, code):
        return
    if code == SCN.YEAR.value and not await _show_year(cb.from_user.id):
        await cb.answer("–ë–æ–Ω—É—Å –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –†–∞–∑–¥–µ–ª ¬´–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ ‚Üí –±–æ–Ω—É—Å¬ª.", show_alert=True)
        return await menu_invite(cb, state)

    data = await state.get_data()
    session_id = data.get("session_id")
    if not session_id:
        user_id = await dbsvc.get_user_id_by_tg(cb.from_user.id)
        session_id = await dbsvc.get_active_session_id(user_id or 0)
        if not session_id:
            await cb.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞–∂–º–∏ /start.")
            await cb.answer()
            return
        await state.update_data(session_id=session_id)

    await cb.answer("–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é‚Ä¶")
    _, preview = await _gen_and_store(session_id, code)
    head = await _scenario_title(code)
    await cb.message.answer(f"‚ôªÔ∏è <b>{head}</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)\n\n{preview}", reply_markup=_scenario_view_kb(code))


async def _scenario_title(code: str) -> str:
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ admin_scenarios, –∏–ª–∏ —Å–∞–º code –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    pool = _require_pool()
    row = await pool.fetchrow("SELECT title FROM admin_scenarios WHERE scenario=$1", code)
    return (row["title"] if row and row["title"] else code)

async def _log_spinner_kind(msg: Message):
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Å—Ç–∏–∫–µ—Ä
    if msg.sticker:
        s = msg.sticker
        fmt = getattr(s, "format", None)
        logging.info(
            f"spinner sent as STICKER: "
            f"format={getattr(fmt, 'value', fmt)} "
            f"is_animated={getattr(s, 'is_animated', None)} "
            f"is_video={getattr(s, 'is_video', None)} "
            f"type={getattr(s, 'type', None)}"
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Å custom emoji
    ents = msg.entities or []
    ce = next((e for e in ents if e.type == "custom_emoji"), None)
    if ce and ce.custom_emoji_id:
        try:
            stickers = await msg.bot.get_custom_emoji_stickers([ce.custom_emoji_id])
            s = stickers[0] if stickers else None
            fmt = getattr(s, "format", None) if s else None
            logging.info(
                f"spinner sent as CUSTOM_EMOJI: id={ce.custom_emoji_id} "
                f"format={getattr(fmt, 'value', fmt)} "
                f"is_animated={getattr(s, 'is_animated', None)} "
                f"is_video={getattr(s, 'is_video', None)}"
            )
        except Exception as e:
            logging.warning(f"custom emoji meta fetch failed: {e}")
    else:
        logging.info("spinner sent as plain text emoji (no sticker, no custom emoji).")

def _unwrap_json_text(s: str) -> str:
    try:
        obj = json.loads(s)
        if isinstance(obj, dict):
            return obj.get("text") or obj.get("year") or s
    except Exception:
        pass
    return s

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –¥–ª—è –ª—é–±—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===

# –ú–∞–ø–∞: –∫–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏—è -> –µ–≥–æ menu_* —Ö–µ–Ω–¥–ª–µ—Ä
SCENARIO_MENU_HANDLERS = {
    "finance":  menu_finance,
    "countries": menu_countries,
    "karma":    menu_karma,
    "love":     menu_love,
    "year":     menu_year,
    "business": menu_business,
    "mission":  menu_mission,
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—à—å —Å—é–¥–∞ –∏ –¥—Ä—É–≥–∏–µ
}

@router.callback_query(F.data.startswith("gate:recheck:"))
async def gate_recheck_any(cb: CallbackQuery, state: FSMContext):
    # –∏–∑ "gate:recheck:<scenario>" –¥–æ—Å—Ç–∞—ë–º <scenario>
    code = cb.data.split(":", 2)[2].strip().lower()

    # –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –æ—Å—Ç–∞–Ω–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≥–µ–π—Ç–∞
    locked, _ = await _need_channel_gate(cb, code)
    if locked:
        await cb.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ –≤–∏–¥–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –∏–Ω–∞—á–µ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    handler = SCENARIO_MENU_HANDLERS.get(code) if False else SCENARIO_MENU_HANDLERS.get(code)
    if handler:
        return await handler(cb, state)

    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –≤ –º–∞–ø–µ
    await cb.answer("–û–∫!", show_alert=False)
